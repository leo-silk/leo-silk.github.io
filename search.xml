<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[magento2 product wishlist url]]></title>
    <url>%2F2018%2F10%2F04%2Fm2-wisthlist-url%2F</url>
    <content type="text"><![CDATA[magento2 phtml 页面生成 product wishtlist url 123$formKey = \Magento\Framework\App\ObjectManager::getInstance()-&gt;get(\Magento\Framework\Data\Form\FormKey::class);$wishlistUrl = $block-&gt;getUrl('wishlist/index/add',['product'=&gt;$product_,'form_key' =&gt; $formKey-&gt;getFormKey()]);]]></content>
      <categories>
        <category>magento2</category>
      </categories>
      <tags>
        <tag>magento2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[deepin 系统触摸板控制]]></title>
    <url>%2F2018%2F10%2F03%2Fdeepin_cmb%2F</url>
    <content type="text"><![CDATA[一、插入鼠标时禁用触摸板 设置-&gt;鼠标-&gt;插入鼠标时禁用触摸板 二、通过终端来开启/禁用触摸板 1、开启触摸板 1$ sudo modprobe psmouse ##启用触摸板 2、关闭触摸板 1$ sudo rmmod psmouse ##禁用触摸板 三、如果是ThinkPad之类含有摇杆的机型可使用下述命令仅禁用触摸板而保留摇杆1、开启触摸板 1$ synclient TouchpadOff=1 ##禁用触摸板 2、关闭触摸板 1$ synclient TouchpadOff=0 ##恢复触摸板 四、自然滚动1、方法一设置-&gt;鼠标-&gt;自然滚动 2、方法二交换滚动方向的信号,但是此方法会同时设置鼠标也使用自然滚动，并且只适用于synaptics触摸版。 在自己的家目录下新建或者修改 .Xmodmap 文件,终端执行: 1$ gedit ~/.Xmodmap 添加或者修改内容为： 1$ pointer = 1 2 3 5 4 7 6 8 9 10 11 12 注销当前用户再登录即可生效。 五、边缘滚动与双指滚动在 xf86-input-libinput 驱动下，双指垂直滚动与边缘滚动只能二选一，谁后设置的谁生效，但在 xf86-input-synaptics 下两者可以同时开启 gsettings set com.deepin.dde.touchpad edge-scroll-enabled true ## 开启边缘滚动gsettings set com.deepin.dde.touchpad vert-scroll-enabled true ## 开启双指垂直滚动gsettings set com.deepin.dde.touchpad horiz-scroll-enabled true ## 开启双指水平滚动 官方文档:http://wiki.deepin.org/wiki/触摸版]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Yii2 ajax 验证码]]></title>
    <url>%2F2018%2F09%2F26%2FYii2-ajax-%E9%AA%8C%E8%AF%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[有时候我们的业务需要用到 ajax 来验证验证码，官方配置太复杂，下面介绍一种简单的方法，配置简单，一看就懂。 一、控制器层12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * 验证码显示页面 **/public function actionIndex()&#123; return $this-&gt;render('index');&#125;/** * 验证码 ajax 验证方法 **/public function actionVerify()&#123; if (Yii::$app-&gt;getRequest()-&gt;isAjax)&#123; $data = Yii::$app-&gt;request-&gt;post(); if(!isset($data['verifyCode']))&#123; $this-&gt;renderJson(100,'验证码不能为空',null); return; &#125; $captcha_validate = new CaptchaAction('captcha', $this); if (isset($data['verifyCode']) &amp;&amp; !$captcha_validate-&gt;validate($data['verifyCode'], false))&#123; $this-&gt;renderJson(100,'验证码错误,请重新输入',null); &#125;else&#123; $this-&gt;renderJson(200,'验证成功',null); &#125; &#125;else&#123; $this-&gt;renderJson(100,'无效请求',null); &#125; return;&#125;public function actions()&#123; return [ 'captcha' =&gt; [ 'class' =&gt; 'yii\captcha\CaptchaAction', 'maxLength'=&gt;5, 'minLength'=&gt;5, 'padding'=&gt;5, 'height'=&gt;39, 'width'=&gt;100, 'offset'=&gt;5, ], ];&#125;public function renderJson($code,$msg,$data)&#123; $ret =array(); $ret['code'] =$code; $ret['msg'] =$msg; $ret['data'] =$data; $this-&gt;asJson($ret);&#125; 二、视图层123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?php $this-&gt;title = "验证码显示页面";?&gt;&lt;label &gt;验证码&lt;sup&gt;*&lt;/sup&gt;&lt;/label&gt;&lt;input type="text" id="validatecode"/&gt;&lt;img src="" id="captcha-img" /&gt;&lt;span class="control-label" id="captcha"&gt;看不清？&lt;/span&gt;&lt;button onClick="validateVerifycode()"&gt;验证&lt;/button&gt;&lt;script&gt; $(function () &#123; //解决验证码不刷新的问题 changeVerifyCode(); $('#captcha').click(function () &#123; changeVerifyCode(); &#125;); &#125;); //更改或者重新加载验证码 function changeVerifyCode() &#123; $.ajax(&#123; url: "/admin/register/captcha?refresh", dataType: 'json', cache: false, success: function (data) &#123; //将验证码图片中的图片地址更换 $("#captcha-img").attr('src', data['url']); &#125; &#125;); &#125; function validateVerifycode()&#123; var validatecode = $('#validatecode').val(); if(!validatecode)&#123; alert('验证码必填'); return; &#125; $.ajax(&#123; url: "/xxx/xxx/verify", type:"POST", data:&#123;verifyCode:validatecode&#125;, dataType: 'json', cache: false, success: function (data) &#123; if(data.code==200)&#123; //验证码正确 &#125;else&#123; //验证码错误 &#125; //刷新验证码 changeVerifyCode(); &#125; &#125;); &#125;&lt;/script&gt; 三、效果展示]]></content>
      <categories>
        <category>Yii2</category>
      </categories>
      <tags>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+github 搭建博客教程]]></title>
    <url>%2F2018%2F09%2F25%2Fhexo%2F</url>
    <content type="text"><![CDATA[一、准备工作1、有一个github账号，没有的话去注册一个。2、本机安装了node.js、npm，并了解npm包的安装3、本机安装了git 二、创建github项目仓库1、登录github官网 https://github.com2、点击右上角头像 左边的 “+” 号 选择 new repository。3、创建一个名为 用户名.gitbub.io 的仓库 比如你的gitbub用户名为 blog 那么仓库名为 blog.github.io (必须安装这个格式来) 否则不能通过 https://blog.github.io 来访问。 三、安装 Hexo 和初始化项目1、安装 Hexo1$ npm install -g hexo 2、初始化项目在项目存放地方建立项目文件,比如 d:/blog 切到项目目录12$ cd d:/blog$ hexo init 通过以上操作hexo会自动创建一些项目文件 3、本地调试 (生成静态文件和启动服务) $ hexo g #生成静态文件到项目public文件下 $ hexo s #启动服务 以上操作后,如出现以下提示表示服务启动成功(如出现错误提示请根据提示解决后再试),现在可以通过http://localhost:4000访问了 以上就是hexo 默认主题 landscape 四、更换主题我们可以通过官方主题来挑选自己喜欢的主题。我们以next为例。 1、下载主题cd 项目根目录下 $ cd d:/blog $ git clone https://github.com/theme-next/hexo-theme-next.git themes/next 下载完成后会在themes 目录下多一个next文件夹，这个就是next主题的文件 2、修改根目录下面的_config.yml文件 # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: next 3、重新生成静态文件 $ hexo clean $ hexo g $ hexo s 通过http://localhost:4000访问 能看到以下界面，表示主题更换成功 五、上传到 github1、配置修改根目录下的_config.yml文件 # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repository: ssh://git@github.com/leo-silk/leo-silk.github.io.git branch: master 2、安装插件 $ cd d:/blog $ npm install hexo-deployer-git --save 3、上传 $ hexo d 5 files changed, 45 insertions(+), 8 deletions(-) Branch master set up to track remote branch master from ssh://git@github.com/leo-silk/leo-silk.github.io.git. To ssh://github.com/leo-silk/leo-silk.github.io.git b510979..fa61fab HEAD -&gt; master INFO Deploy done: git 上传成功后可以通过https://leo-silk.github.io 来访问你的博客了。 六、域名绑定1、在域名解析中添加以下两条记录 A 记录的记录值 192.30.252.153 可以通过 ping leo-silk.github.io 来获取 2、在github中设置 说明：1、如果你填写的是没有www的，比如 liyanbk.com，那么无论是访问 http://www.liyanbk.com 还是 http://liyanbk.com ，都会自动跳转到 http://liyanbk.com 2、如果你填写的是带www的，比如 www.liyanbk.com ，那么无论是访问 http://www.liyanbk.com 还是 http://liyanbk.com ，都会自动跳转到 http://www.liyanbk.com 3、如果你填写的是其它子域名，比如 abc.liyanbk.com，那么访问 http://abc.liyanbk.com 没问题，但是访问 http://liyanbk.com ，不会自动跳转到 http://abc.liyanbk.com 保存后等待1分钟左右可以通过设置的域名访问你的博客了。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
